{"version":3,"file":"static/js/395.b1857af7.chunk.js","mappings":"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","sources":["app/components/MatxDivider.jsx","app/views/sessions/register/FirebaseRegister.jsx"],"sourcesContent":["import { Box, styled } from \"@mui/material\";\r\n\r\nconst DividerRoot = styled(Box)(({ theme }) => ({\r\n  textAlign: \"center\",\r\n  position: \"relative\",\r\n  height: 16,\r\n  \"&::after\": {\r\n    left: 0,\r\n    zIndex: 1,\r\n    top: \"10px\",\r\n    content: '\"\"',\r\n    width: \"100%\",\r\n    height: \"1px\",\r\n    position: \"absolute\",\r\n    backgroundColor: theme.palette.divider\r\n  },\r\n  \"& span\": {\r\n    zIndex: 5,\r\n    background: \"#fff\",\r\n    padding: \"4px 6px\",\r\n    position: \"relative\",\r\n    color: theme.palette.text.secondary\r\n  }\r\n}));\r\n\r\nexport default function MatxDivider({ text, sx }) {\r\n  return (\r\n    <div>\r\n      <DividerRoot sx={sx}>{text && <span>{text}</span>}</DividerRoot>\r\n    </div>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\nimport { NavLink, useNavigate } from \"react-router-dom\";\r\nimport { Box, Button, Card, Checkbox, Grid, styled, TextField, useTheme } from \"@mui/material\";\r\nimport { LoadingButton } from \"@mui/lab\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\n// GLOBAL CUSTOM COMPONENTS\r\nimport MatxDivider from \"app/components/MatxDivider\";\r\nimport { Paragraph } from \"app/components/Typography\";\r\n// GLOBAL CUSTOM HOOKS\r\nimport useAuth from \"app/hooks/useAuth\";\r\n\r\n// STYLED COMPONENTS\r\nconst ContentBox = styled(\"div\")(({ theme }) => ({\r\n  height: \"100%\",\r\n  padding: \"32px\",\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"center\",\r\n  backgroundColor: theme.palette.background.default\r\n}));\r\n\r\nconst FlexBox = styled(Box)({\r\n  display: \"flex\"\r\n});\r\n\r\nconst IMG = styled(\"img\")({ width: \"100%\" });\r\n\r\nconst GoogleButton = styled(Button)(({ theme }) => ({\r\n  color: \"rgba(0, 0, 0, 0.87)\",\r\n  backgroundColor: \"#e0e0e0\",\r\n  boxShadow: theme.shadows[0],\r\n  \"&:hover\": { backgroundColor: \"#d5d5d5\" }\r\n}));\r\n\r\nconst RegisterRoot = styled(\"div\")({\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"center\",\r\n  background: \"#1A2038\",\r\n  minHeight: \"100vh !important\",\r\n  \"& .card\": { maxWidth: 650, margin: 16, borderRadius: 12 }\r\n});\r\n\r\n// initial login credentials\r\nconst initialValues = {\r\n  email: \"\",\r\n  password: \"\",\r\n  remember: true\r\n};\r\n\r\n// form field validation schema\r\nconst validationSchema = Yup.object().shape({\r\n  password: Yup.string()\r\n    .min(6, \"Password must be 6 character length\")\r\n    .required(\"Password is required!\"),\r\n  email: Yup.string().email(\"Invalid Email address\").required(\"Email is required!\")\r\n});\r\n\r\nexport default function FirebaseRegister() {\r\n  const theme = useTheme();\r\n  const navigate = useNavigate();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [loading, setLoading] = useState(false);\r\n  const { createUserWithEmail, signInWithGoogle } = useAuth();\r\n\r\n  const handleGoogleRegister = async () => {\r\n    try {\r\n      await signInWithGoogle();\r\n      navigate(\"/\");\r\n    } catch (e) {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleFormSubmit = async (values) => {\r\n    try {\r\n      setLoading(true);\r\n      await createUserWithEmail(values.email, values.password);\r\n      navigate(\"/\");\r\n      enqueueSnackbar(\"Register Successfully!\", { variant: \"success\" });\r\n    } catch (e) {\r\n      setLoading(false);\r\n      enqueueSnackbar(e.message, { variant: \"error\" });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <RegisterRoot>\r\n      <Card className=\"card\">\r\n        <Grid container>\r\n          <Grid item lg={5} md={5} sm={5} xs={12}>\r\n            <ContentBox>\r\n              <IMG src=\"/assets/images/illustrations/posting_photo.svg\" alt=\"\" />\r\n            </ContentBox>\r\n          </Grid>\r\n\r\n          <Grid item lg={7} md={7} sm={7} xs={12}>\r\n            <Box px={4} pt={4}>\r\n              <GoogleButton\r\n                fullWidth\r\n                variant=\"contained\"\r\n                onClick={handleGoogleRegister}\r\n                startIcon={<img src=\"/assets/images/logos/google.svg\" alt=\"google\" />}>\r\n                Sign In With Google\r\n              </GoogleButton>\r\n            </Box>\r\n\r\n            <MatxDivider sx={{ mt: 3, px: 4 }} text=\"Or\" />\r\n\r\n            <Box p={4} height=\"100%\">\r\n              <Formik\r\n                onSubmit={handleFormSubmit}\r\n                initialValues={initialValues}\r\n                validationSchema={validationSchema}>\r\n                {({ values, errors, touched, handleChange, handleBlur, handleSubmit }) => (\r\n                  <form onSubmit={handleSubmit}>\r\n                    <TextField\r\n                      fullWidth\r\n                      size=\"small\"\r\n                      type=\"email\"\r\n                      name=\"email\"\r\n                      label=\"Email\"\r\n                      variant=\"outlined\"\r\n                      onBlur={handleBlur}\r\n                      value={values.email}\r\n                      onChange={handleChange}\r\n                      helperText={touched.email && errors.email}\r\n                      error={Boolean(errors.email && touched.email)}\r\n                      sx={{ mb: 3 }}\r\n                    />\r\n                    <TextField\r\n                      fullWidth\r\n                      size=\"small\"\r\n                      name=\"password\"\r\n                      type=\"password\"\r\n                      label=\"Password\"\r\n                      variant=\"outlined\"\r\n                      onBlur={handleBlur}\r\n                      value={values.password}\r\n                      onChange={handleChange}\r\n                      helperText={touched.password && errors.password}\r\n                      error={Boolean(errors.password && touched.password)}\r\n                      sx={{ mb: 1.5 }}\r\n                    />\r\n\r\n                    <FlexBox gap={1} alignItems=\"center\">\r\n                      <Checkbox\r\n                        size=\"small\"\r\n                        name=\"remember\"\r\n                        onChange={handleChange}\r\n                        checked={values.remember}\r\n                        sx={{ padding: 0 }}\r\n                      />\r\n\r\n                      <Paragraph fontSize={13}>\r\n                        I have read and agree to the terms of service.\r\n                      </Paragraph>\r\n                    </FlexBox>\r\n\r\n                    <LoadingButton\r\n                      type=\"submit\"\r\n                      color=\"primary\"\r\n                      loading={loading}\r\n                      variant=\"contained\"\r\n                      sx={{ my: 2 }}>\r\n                      Regiser\r\n                    </LoadingButton>\r\n\r\n                    <Paragraph>\r\n                      Already have an account?\r\n                      <NavLink\r\n                        to=\"/session/signin\"\r\n                        style={{ color: theme.palette.primary.main, marginLeft: 5 }}>\r\n                        Login\r\n                      </NavLink>\r\n                    </Paragraph>\r\n                  </form>\r\n                )}\r\n              </Formik>\r\n            </Box>\r\n          </Grid>\r\n        </Grid>\r\n      </Card>\r\n    </RegisterRoot>\r\n  );\r\n}\r\n"],"names":["DividerRoot","styled","Box","_ref","theme","textAlign","position","height","left","zIndex","top","content","width","backgroundColor","palette","divider","background","padding","color","text","secondary","MatxDivider","_ref2","sx","_jsx","children","ContentBox","display","alignItems","justifyContent","default","FlexBox","IMG","GoogleButton","Button","boxShadow","shadows","RegisterRoot","minHeight","maxWidth","margin","borderRadius","initialValues","email","password","remember","validationSchema","Yup","shape","min","required","FirebaseRegister","useTheme","navigate","useNavigate","enqueueSnackbar","useSnackbar","loading","setLoading","useState","createUserWithEmail","signInWithGoogle","useAuth","Card","className","_jsxs","Grid","container","item","lg","md","sm","xs","src","alt","px","pt","fullWidth","variant","onClick","async","e","startIcon","mt","p","Formik","onSubmit","values","message","_ref3","errors","touched","handleChange","handleBlur","handleSubmit","TextField","size","type","name","label","onBlur","value","onChange","helperText","error","Boolean","mb","gap","Checkbox","checked","Paragraph","fontSize","LoadingButton","my","NavLink","to","style","primary","main","marginLeft"],"sourceRoot":""}